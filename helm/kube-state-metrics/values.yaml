kube-state-metrics:  
  # Default values for kube-state-metrics.
  prometheusScrape: false
  image:
    registry: gsoci.azurecr.io
    repository: giantswarm/kube-state-metrics
    pullPolicy: IfNotPresent

  global:
    #
    # Allow parent charts to override registry hostname
    imageRegistry: gsoci.azurecr.io

  # If set to true, this will deploy kube-state-metrics as a StatefulSet and the data
  # will be automatically sharded across <.Values.replicas> pods using the built-in
  # autodiscovery feature: https://github.com/kubernetes/kube-state-metrics#automated-sharding
  # This is an experimental feature and there are no stability guarantees.
  autosharding:
    enabled: false

  replicas: 1

  # Change the deployment strategy when autosharding is disabled.
  # ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  # The default is "RollingUpdate" as per Kubernetes defaults.
  # During a release, 'RollingUpdate' can lead to two running instances for a short period of time while 'Recreate' can create a small gap in data.
  # updateStrategy: Recreate

  rbac:
    # If true, create & use RBAC resources
    create: true

    # Add permissions for CustomResources' apiGroups in Role/ClusterRole. Should be used in conjunction with Custom Resource State Metrics configuration
    extraRules:
    - apiGroups: ["autoscaling.k8s.io"]
      resources:
        - verticalpodautoscalers
      verbs: ["list", "watch"]

  serviceAccount:
    # Specifies whether a ServiceAccount should be created, require rbac true
    create: true

  prometheus:
    monitor:
      enabled: true

      ## kube-state-metrics endpoint
      http:
        interval: ""
        scrapeTimeout: ""
        proxyUrl: ""
        ## Whether to enable HTTP2 for servicemonitor
        enableHttp2: false
        honorLabels: false
        metricRelabelings:
        # GS addition to reduce cardinality
        # drop unused kube-state-metrics metrics with the highest cardinality as they increase Prometheus memory usage
        - sourceLabels: [__name__]
          regex: kube_(.+_annotations|secret_type|pod_status_qos_class|pod_tolerations|pod_status_scheduled|replicaset_metadata_generation|replicaset_status_observed_generation|replicaset_annotations|replicaset_status_fully_labeled_replicas|.+_metadata_resource_version)
          action: drop
        # drop image_id label
        - action: labeldrop
          regex: image_id
        # GS addition for dashboards
        - sourceLabels: [label_topology_kubernetes_io_region]
          targetLabel: region
          replacement: ${1}
          action: replace
        - sourceLabels: [label_topology_kubernetes_io_zone]
          targetLabel: zone
          replacement: ${1}
          action: replace
        - action: labeldrop
          regex: label_topology_kubernetes_io_region|label_topology_kubernetes_io_zone
        # Override with label for AWS clusters if exists.
        - sourceLabels: [label_giantswarm_io_machine_deployment]
          targetLabel: nodepool
          replacement: ${1}
          action: replace
        # Override with label for Azure clusters if exists.
        - sourceLabels: [label_giantswarm_io_machine_pool]
          targetLabel: nodepool
          replacement: ${1}
          action: replace
        relabelings:
        # Add app label.
        - targetLabel: app
          replacement: kube-state-metrics
        # Add node label.
        - sourceLabels: [__meta_kubernetes_pod_node_name]
          targetLabel: node]

  ## Specify if a Pod Security Policy for kube-state-metrics must be created
  ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  ##
  podSecurityPolicy:
    enabled: true

  ## Configure network policy for kube-state-metrics
  networkPolicy:
    enabled: true
    # networkPolicy.flavor -- Flavor of the network policy to use.
    # Can be:
    # * kubernetes for networking.k8s.io/v1/NetworkPolicy
    # * cilium     for cilium.io/v2/CiliumNetworkPolicy
    flavor: kubernetes
    egress:
    - to:
      - ipBlock:
          cidr: 10.0.0.0/8
      - ipBlock:
          cidr: 172.16.0.0/12
      - ipBlock:
          cidr: 192.168.0.0/16
      - ipBlock:
          cidr: 100.64.0.0/10
    ingress:
    - ports:
      - port: 8080
        protocol: TCP
      - port: 8081
        protocol: TCP

    ## Configure the cilium network policy kube-apiserver selector
    # cilium:
      # kubeApiServerSelector:
        # - toEntities:
        #   - kube-apiserver

  securityContext:
    enabled: true
    runAsGroup: 65534
    runAsUser: 65534
    fsGroup: 65534
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault

  ## Specify security settings for a Container
  ## Allows overrides and additional options compared to (Pod) securityContext
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  containerSecurityContext:
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL

  # Annotations to be added to the pod
  podAnnotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"

  ## Assign a PriorityClassName to pods if set
  # priorityClassName: ""

  # Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  podDisruptionBudget: {}

  # Comma-separated list of additional Kubernetes label keys that will be used in the resource's
  # labels metric. By default the metric contains only name and namespace labels.
  # To include additional labels, provide a list of resource names in their plural form and Kubernetes
  # label keys you would like to allow for them (Example: '=namespaces=[k8s-label-1,k8s-label-n,...],pods=[app],...)'.
  # A single '*' can be provided per resource instead to allow any labels, but that has
  # severe performance implications (Example: '=pods=[*]').
  metricLabelsAllowlist:
    - cronjobs=[application.giantswarm.io/team, app.kubernetes.io/name]
    - jobs=[application.giantswarm.io/team, app.kubernetes.io/name]
    - daemonsets=[application.giantswarm.io/team, app.kubernetes.io/name, app.kubernetes.io/component, app.kubernetes.io/instance, giantswarm.io/service-type]
    - deployments=[application.giantswarm.io/team, app.kubernetes.io/name, app.kubernetes.io/component, app.kubernetes.io/instance, giantswarm.io/service-type]
    - nodes=[giantswarm.io/machine-pool, giantswarm.io/machine-deployment, ip, node.kubernetes.io/instance-type, topology.kubernetes.io/region, topology.kubernetes.io/zone]
    - pods=[application.giantswarm.io/team, app.kubernetes.io/name, app.kubernetes.io/component, app.kubernetes.io/instance, giantswarm.io/service-type]
    - statefulsets=[application.giantswarm.io/team, app.kubernetes.io/name, app.kubernetes.io/component, app.kubernetes.io/instance, giantswarm.io/service-type]

  # Available collectors for kube-state-metrics.
  # By default, all available resources are enabled, comment out to disable.
  collectors:
    - certificatesigningrequests
    - configmaps
    - cronjobs
    - daemonsets
    - deployments
    - endpoints
    - horizontalpodautoscalers
    - ingresses
    - jobs
    - leases
    - limitranges
    - mutatingwebhookconfigurations
    - namespaces
    - networkpolicies
    - nodes
    - persistentvolumeclaims
    - persistentvolumes
    - poddisruptionbudgets
    - pods
    - replicasets
    - replicationcontrollers
    - resourcequotas
    - secrets
    - services
    - statefulsets
    - storageclasses
    - validatingwebhookconfigurations
    - volumeattachments
    # - ingressclasses
    # - clusterrolebindings
    # - clusterroles
    # - roles

  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 200m
      memory: 200Mi

  # Enable vertical pod autoscaler support for kube-state-metrics
  verticalPodAutoscaler:
    enabled: true
    # We set minAllowed=requests to allow VPA to work efficiently
    minAllowed:
      cpu: 200m
      memory: 200Mi
